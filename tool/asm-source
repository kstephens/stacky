#!/usr/bin/env ruby

class AsmSource
  def initialize
    @lines = { }
    @files = { }
  end
  def file fileno
    @files[fileno] or raise "no file number #{fileno}"
  end
  def file_lines file
    @lines[file] ||= File.open(file).readlines
  rescue => exc
    raise exc.class, "for file #{file.inspect} : #{exc}", exc.backtrace
  end
  def show_line! file, lineno, pos
    o = $stdout
    # o.puts  " # #{file}:#{lineno}"
    lineno -= 1
    line = file_lines(file)[lineno]
    if line =~ /^\{/
      line1 = file_lines(file)[lineno - 1]
      o.write " ;# "; o.write line1
    end
    o.write " ;# "; o.write line
    if pos && pos > 0
      o.write " ;#"
      o.write "-" * (pos)
      o.puts "^"
    end
    self
  end
  def run!
    $stdout.puts "# -*- asm -*-"
    asm_lineno = 0
    until ARGF.eof?
      line = ARGF.readline
      asm_lineno += 1
      emit_line = true
      begin
      case line
      when /^\s*\#\#?DEBUG_VALUE:/
        emit_line = false
      when / ## ([^:]+):(\d+):(\d+)/
        show_line! $1, $2.to_i, $3.to_i
      when /^\s*\.file\s+(\d+)\s+"([^"]+)"\s+"([^"]+)"/
	file_i, path = $1.to_i, "#{$2}/#{$3}"
        @files[file_i] = path
      when /^\s*\.file\s+(\d+)\s+"([^"]+)"/
	file_i, path = $1.to_i, $2
        @files[file_i] = path
      when /^\s*\.loc\s+(\d+)\s+(\d+)\s+(\d+)/
	file_i, lineno, colno = $1.to_i, $2.to_i, $3.to_i
        show_line! file(file_i), lineno, colno
      end
      $stdout.write line if emit_line
      rescue => exc
        raise exc.class, "line #{asm_lineno} : #{line.inspect} : #{exc}", exc.backtrace
      end
    end
    self
  end
end
AsmSource.new.run!
