# Comment


# k v DEF |
{ exch &dict_stack_top &dict_set }
`def &dict_stack_top &dict_set

`&argv0_symbols 0 &argv array_get 0 &dlopen def
`&extern { &argv0_symbols exch &dlsym } def
`exit { 2 irsh "exit" &extern 1 &c_proc } def

`p {
  &v_stdout &write
  "
" &v_stdout &write_string
} def

`. {
  dup p
} def

`&error { # desc ERROR |
  [ exch `error ] &error_catch &throw
} def

`&typecheck { # val type TYPECHECK |
   exch          # type val
   1 vget        # type val type
   exch          # type type val
   &v_type       # type type type(val)
   eqw           # type type==type(val)
   { pop } { [ swap `typecheck ] &error } ifelse
} def

`dict_keys { # dict | [ key ... ]
  dup array_l
  [ ]
  0
  {                    # dict | l a=[ ] i
    dup                # dict | l a=[ ] i i
    4 vget             # dict | l a=[ ] i i dict
    array_get          # dict | l a=[ ] i k=dict[i]
    dup &nullq         # dict | l a=[ ] i k k==0
    { pop } {
      2 vget           # dict | l a=[ ] i k a
      array_push       # dict | l a=[ k ... ] i
    } ifelse
    2 +                # dict | l a=[ k ... ] i+2
  } {
    dup                # dict | l a=[ k ... ] i+2 i+2
    3 vget             # dict | l a=[ k ... ] i+2 i+2 l
    &lt                # dict | l a=[ k ... ] i+2 (0|1)
  } loop               # dict | l a=[ k ... ] i+2
  pop exch pop         # dict | [ keys ... ]
} def
